/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/

/* Hack to make AutoDoc generate protocol description. */

@implementation SCDrawable

/*" 
  Formal protocol defining a type that SCController can draw into.

  The SCView class conforms to this protocol and handles setting the
  controller's drawable behind the scenes; in most cases you will
  be able to simply use an SCView for drawing. 

  However, if you do not have a view (i.e. an NSView-derived instance,
  such as SCView), you have to create an object that conforms to this
  protocol and set your SCController's !{drawable} outlet. A typical
  case where you have to use this approach is "real" fullscreen
  rendering. (Refer to the Sc21 fullscreen example that ships with
  Sc21 for an example on how to do this.)
"*/

  
/*" 
  Render a frame, and swap the front and back buffers. 

  SCView does this by simply sending !{display} to NSView. 

  When implementing this method yourself, you would typically
  send the !{render} message to your SCController and flush the
  buffers of your context.
"*/ 
- (void)display
{} 


{
  if (_fullScreenContext) {
    return NSMakeRect(0, 0, 
                      CGDisplayPixelsWide(_displayid), 
                      CGDisplayPixelsHigh(_displayid));
  } else {
    return [view frame];
  }
}

/*" 
  Returns the position and size of the drawable.
  
  SCView returns it's own frame (as returned by NSView's method
  of the same name).

  When running in fullscreen mode, you should return an NSRect of the
  dimensions (0, 0, %displaywidth, %displayheight).
"*/
- (NSRect)frame
{} 
@end

